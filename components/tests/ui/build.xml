<?xml version="1.0" encoding="utf-8"?>
<project name="ui-tests" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright 2013-2018 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Jean-Marie Burel, j.burel at dundee.ac.uk
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-->
    <description>
        The from-a-distance automated operations on OMERO client UIs
        that are performed by Robot Framework. At present this build
        file simply compiles the Java source for custom script
        keywords.
    </description>

    <!-- run jybot with various arguments. Used to run insight tests.-->
    <macrodef name="run_jybot">
        <attribute name="failonerror" default="true"/>
        <attribute name="filename"/>
        <attribute name="output"/>
        <sequential>
            <exec executable="jybot" failonerror="@{failonerror}" dir="${reports.insight}">
                <env key="CLASSPATH" value="${insight.dir}/app/libs/*:${insight.dir}/dist/omero.insight.jar:${target.dir}/java-ui-libraries-${omero.version}.jar:${lib.dir}/repository/swinglibrary-${versions.robotframework.swinglibrary}.jar:${lib.dir}/repository/xercesImpl-${versions.xercesImpl}.jar"/>
                    <arg value="-d"/>
                    <arg value="@{output}"/>
                    <arg value="--loglevel"/>
                    <arg value="debug"/>
                    <arg value="${basedir}/testcases/insight/${filename}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- run pybot with various arguments. Used to run web/cli tests.-->
    <macrodef name="run_pybot">
        <attribute name="failonerror" default="true"/>
        <attribute name="output"/>
        <element name="args" implicit="true"/>
        <sequential>
            <exec executable="pybot" failonerror="@{failonerror}" dir="${output}">
                <env key="PYTHONPATH" path="${basedir}/library/python:${env.PYTHONPATH}"/>
                 <args/>
            </exec>
        </sequential>
    </macrodef>

    <!-- run pabot with various arguments. Used to run web tests.-->
    <macrodef name="run_pabot">
        <attribute name="failonerror" default="true"/>
        <attribute name="output"/>
        <element name="args" implicit="true"/>
        <sequential>
            <exec executable="pabot" failonerror="@{failonerror}" dir="${output}">
                <env key="PYTHONPATH" path="${basedir}/library/python:${env.PYTHONPATH}"/>
                 <args/>
            </exec>
        </sequential>
    </macrodef>

    <!-- point the build file used to generate the ui libraries -->
    <macrodef name="librarybuild">
        <attribute name="target"/>
        <sequential>
            <ant antfile="${basedir}/library/java/build.xml" inheritAll="false" inheritRefs="false" target="@{target}">
            </ant>
        </sequential>
    </macrodef>

    <!-- The number of processes if run using pabot. -->
    <property name="pabot.processes" value="3"/>

    <!-- The name of the rerun file. -->
    <property name="reports.rerun" value="rerun.xml"/>

    <!-- The name of the output file. -->
    <property name="reports.output" value="output.xml"/>

    <!-- reports directory. -->
    <property name="reports" value="${basedir}/target/reports"/>

    <!-- reports for the web tests. -->
    <property name="reports.web" value="${reports}/web"/>

    <!-- reports for the insight tests. -->
    <property name="reports.insight" value="${reports}/insight"/>

    <!-- reports for the cli tests. -->
    <property name="reports.cli" value="${reports}/cli"/>

    <!-- reports for the cli tests. -->
    <property name="target.images" value="${basedir}/target/images"/>


    <property name="main.class" value="NONE"/>

    <property name="import.dir" value="${basedir}/../../antlib/resources"/>

    <property name="target.dir" value="${basedir}/../../../target/repository"/>

    <property name="insight.dir" value="${basedir}/../../insight/OUT"/>

    <!-- file created while running the web-browser -DBROWSER=chrome target -->
    <property name="google.log" value="${basedir}/libpeerconnection.log"/>

    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>

    <!-- set up the directory for insight reports. -->
    <target name="setup-dir">
        <echo message="deprecated. insight tests are no longer run"/>
        <mkdir dir="${reports.insight}" />
        <!-- copy the config folder. This should be modified later -->
        <mkdir dir="${reports.insight}/config"/>
        <copy todir="${reports.insight}/config" verbose="yes" flatten="yes" failonerror="no">
            <fileset dir="${insight.dir}/../config"/>
        </copy>
    </target>

    <!--  run the web, insight and CLI tests -->
    <target name="test-all" unless="env.NOPYTHON">
        <echo message="deprecated. Use ui-test-web instead"/>
        <antcall target="ui-test-insight" inheritRefs="true" inheritAll="true"/>
        <antcall target="ui-test-web" inheritRefs="true" inheritAll="true"/>
        <antcall target="test-cli" inheritRefs="true" inheritAll="true"/>
    </target>


    <!-- aggregate the results to publish them -->
    <target name="aggregate-results">
        <if>
            <available file="${reports}" type="dir"/>
            <then>
                <apply executable="rebot" dir="${reports}" parallel="true">
                    <arg value="--output"/>
                    <arg value="${reports.output}"/>
                    <srcfile/> 
                    <fileset id="reports.files" dir="${reports}/">
                       <include name="**/${reports.output}"/>
                    </fileset>
                </apply>
            </then>
        </if>
    </target>

    <!-- merge the results to publish them -->
    <target name="merge-results">
        <delete file="${reports}/${reports.output}" failonerror="false"/>
        <if>
            <available file="${reports}" type="dir"/>
            <then>
                <apply executable="rebot" dir="${reports}" parallel="true">
                    <arg value="--output"/>
                    <arg value="${reports.output}"/>
                    <srcfile/>
                    <arg value="--merge"/>
                    <fileset id="reports.files" dir="${reports}/">
                       <include name="**/${reports.output}"/>
                    </fileset>
                </apply>
            </then>
        </if>
    </target>

    <!-- merge the results of test reruns to publish them -->
    <target name="merge-results-rerun">
        <delete file="${reports}/${reports.output}" failonerror="false"/>
        <var name="browser" value="firefox/"/>
        <if><isset property="BROWSER"/>
            <then>
                <var name="browser" value="${BROWSER}"/>
            </then>
        </if>
        <var name="output" value="${reports.web}/${browser}"/>
        <if>
            <available file="${reports}" type="dir"/>
            <then>
                <apply executable="rebot" dir="${reports}" parallel="true">
                    <arg value="--output"/>
                    <arg value="${reports.output}"/>
                    <arg value="--merge"/>
                    <srcfile/>
                    <fileset id="reports.files" dir="${output}/">
                       <include name="${reports.output}"/>
                       <include name="${reports.rerun}"/>
                    </fileset>
                </apply>
            </then>
        </if>
    </target>

	<target name="check-config-file">
	    <property file="${basedir}/resources/config.txt" />
	    <available file="${basedir}/resources/config.txt" property="hasconfig" />
	    <fail unless="hasconfig" message="The configuration file ${basedir}/resources/config.txt does not exist. Please follow instructions under ${basedir}/README.md." />
	</target>

    <!-- run the cli tests. -->
    <target name="test-cli" depends="check-config-file">
        <echo message="deprecated. The insight tests are no longer run"/>
        <mkdir dir="${reports.cli}" />
        <!--<touch file="${reports.cli}/error.log"/>-->
        <var name="target" value="cli/"/>
        <if><isset property="TEST"/>
            <then>
                <var name="target" value="cli/${TEST}"/>
            </then>
        </if>
        <exec executable="pybot" failonerror="${test.with.fail}" dir="../../../dist/">
            <env key="PYTHONPATH" path="${basedir}/library/python:${env.PYTHONPATH}"/>    
            <redirector error="${reports.cli}/cli.log" alwayslog="false"/>       
            <arg value="-d"/>
            <arg value="${reports.cli}"/>
            <arg value="--loglevel"/>
            <arg value="debug"/>
            <arg value="${basedir}/testcases/${target}"/>
        </exec>
    </target>
    <!-- run all the tests for insight -->
    <target name="run_all_insight" depends="setup-dir">
        <echo message="deprecated. The insight tests are no longer run"/>
        <!-- execute sub-directory per sub-directory -->
        <for param="file">
            <path>
                <dirset dir="${basedir}/testcases/insight" includes="*"/>
            </path>
            <sequential>
                <local name="filename" />
                <basename property="filename" file="@{file}"/>
                <var name="output" value="${reports.insight}/${filename}"/>
                <mkdir dir="${output}" />
                <run_jybot failonerror="${test.with.fail}" filename="${filename}" output="${output}"/>
            </sequential>
        </for>
    </target>

    <!-- run the tests in the specified folder or run the speficied test. -->
    <target name="run_folder_insight" depends="setup-dir">
        <echo message="deprecated. The insight tests are no longer run"/>
        <var name="filename" value="${TEST}"/>
        <if>
            <available file="${basedir}/testcases/insight/${filename}" type="dir"/>
            <then>
                <var name="output" value="${reports.insight}/${filename}"/>
                <mkdir dir="${output}" />
                <run_jybot failonerror="${test.with.fail}" filename="testcases/insight/${filename}" output="${output}"/>
            </then>
            <else>
                <antcall target="run_single_insight" inheritRefs="true" inheritAll="true"/>
            </else>
        </if>
    </target>

    <!-- run the specified test -->
    <target name="run_single_insight" depends="setup-dir">
        <echo message="deprecated. The insight tests are no longer run"/>
        <var name="filename" value="${TEST}"/>
        <dirname file="${filename}" property="filename.parent" />
        <basename property="parent" file="${filename.parent}"/>
        <var name="output" value="${reports.insight}/${parent}"/>
        <mkdir dir="${output}" />
        <run_jybot failonerror="${test.with.fail}" filename="testcases/insight/${filename}" output="${output}"/>
    </target>

    <!--  run the insight tests -->
    <target name="ui-test-insight" depends="check-config-file">
        <echo message="deprecated. The insight tests are no longer run"/>
        <if><isset property="TEST"/><then>
            <antcall target="run_folder_insight" inheritRefs="true" inheritAll="true"/></then>
            <else>
                <antcall target="run_all_insight" inheritRefs="true" inheritAll="true"/>
            </else>
        </if>
    </target>

    <!--  run all the web tests -->
    <target name="ui-test-web">
        <antcall target="web-browser" inheritRefs="true" inheritAll="true"/>
        <antcall target="web-browser" inheritRefs="true" inheritAll="true">
            <param name="BROWSER" value="chrome"/>
        </antcall>
    </target>

    <!--  run all the web tests with pabot-->
    <target name="ui-test-web-pabot">
        <antcall target="web-browser-pabot" inheritRefs="true" inheritAll="true"/>
        <antcall target="web-browser-pabot" inheritRefs="true" inheritAll="true">
            <param name="BROWSER" value="chrome"/>
        </antcall>
    </target>

    <!-- test with firefox -->
    <!-- deprecated use web-browser instead -->
    <target name="web-firefox" depends="check-config-file">
        <echo message="deprecated use web-browser instead"/>
        <antcall target="web-browser" inheritRefs="true" inheritAll="true"/>
    </target>

    <!-- test with chrome. The chrome driver has to be installed -->
    <!-- deprecated use web-browser -DBROWSER=chrome instead -->
    <target name="web-chrome" depends="check-config-file">
        <echo message="deprecated use web-browser -DBROWSER=chrome instead"/>
        <antcall target="web-browser" inheritRefs="true" inheritAll="true">
            <param name="BROWSER" value="chrome"/>
        </antcall>
    </target>

    <!-- test with a given browser. If chrome is used, the chrome driver has to be installed -->
    <target name="web-browser" depends="check-config-file">
        <var name="browser" value="firefox"/>
        <if><isset property="BROWSER"/>
            <then>
                <var name="browser" value="${BROWSER}"/>
            </then>
        </if>
        <var name="output" value="${reports.web}/${browser}"/>
        <mkdir dir="${output}"/>
        <var name="target" value="web/"/>
        <if><isset property="TEST"/>
            <then>
                <var name="target" value="web/${TEST}"/>
            </then>
        </if>
        <run_pybot failonerror="${test.with.fail}" output="${output}">
            <arg value="-d"/>
            <arg value="${output}"/>
            <arg value="-v"/>
            <arg value="browser:${browser}"/>
            <arg value="-v"/>
            <arg value="DELAY:0.2"/>
            <arg value="--loglevel"/>
            <arg value="debug"/>
            <arg value="${basedir}/testcases/${target}"/>
        </run_pybot>
        <if>
            <available file="${google.log}"/>
            <then>
                <move file="${google.log}" todir="${reports.web}/${browser}"/>
            </then>
        </if>
    </target>

    <!-- Rerun the tests that failed. It is possible to retest in the same or another browser
    either the test failures or the full tests suite. the chrome driver has to be installed -->
    <target name="web-browser-rerun" depends="check-config-file">
        <var name="browser" value="firefox/"/>
        <if><isset property="BROWSER"/>
            <then>
                <var name="browser" value="${BROWSER}"/>
            </then>
        </if>
        <var name="output" value="${reports.web}/${browser}"/>
        <var name="target" value="web/"/>
        <var name="run" value="--rerunfailed"/>
        <var name="targetbrowser" value="chrome"/>
        <if><isset property="TARGETBROWSER"/>
            <then>
                <var name="targetbrowser" value="${TARGETBROWSER}"/>
            </then>
        </if>
        <if><isset property="TEST"/>
            <then>
                <var name="target" value="web/${TEST}"/>
            </then>
        </if>
        <if><isset property="SUITE"/>
            <then>
                <var name="run" value="--rerunfailedsuites"/>
            </then>
        </if>
        <run_pybot failonerror="${test.with.fail}" output="${output}">
            <arg value="--nostatusrc"/>
            <arg value="${run}"/>
            <arg value="${output}/${reports.output}"/>
            <arg value="--output"/>
            <arg value="${output}/${reports.rerun}"/>
            <arg value="-v"/>
            <arg value="browser:${targetbrowser}"/>
            <arg value="-v"/>
            <arg value="DELAY:0.2"/>
            <arg value="--loglevel"/>
            <arg value="debug"/>
            <arg value="${basedir}/testcases/${target}"/>
        </run_pybot>
        <if>
            <available file="${google.log}"/>
            <then>
                <move file="${google.log}" todir="${reports.web}/${browser}"/>
            </then>
        </if>
    </target>

    <!-- Rerun the tests that failed in parallel. It is possible to retest in the same or another browser
    either the test failures or the full tests suite. the chrome driver has to be installed -->
    <target name="web-browser-rerun-pabot" depends="check-config-file">
        <var name="browser" value="firefox/"/>
        <if><isset property="BROWSER"/>
            <then>
                <var name="browser" value="${BROWSER}"/>
            </then>
        </if>
        <var name="output" value="${reports.web}/${browser}"/>
        <var name="target" value="web/"/>
        <var name="run" value="--rerunfailed"/>
        <var name="targetbrowser" value="chrome"/>
        <if><isset property="TARGETBROWSER"/>
            <then>
                <var name="targetbrowser" value="${TARGETBROWSER}"/>
            </then>
        </if>
        <if><isset property="SUITE"/>
            <then>
                <var name="run" value="--rerunfailedsuites"/>
            </then>
        </if>
        <run_pabot failonerror="${test.with.fail}" output="${output}">
            <arg value="--processes"/>
            <arg value="${pabot.processes}"/>
            <arg value="--nostatusrc"/>
            <arg value="${run}"/>
            <arg value="${output}/${reports.output}"/>
            <arg value="--output"/>
            <arg value="${output}/${reports.rerun}"/>
            <arg value="-v"/>
            <arg value="browser:${targetbrowser}"/>
            <arg value="-v"/>
            <arg value="DELAY:0.2"/>
            <arg value="--loglevel"/>
            <arg value="debug"/>
            <arg value="${basedir}/testcases/${target}"/>
        </run_pabot>
        <if>
            <available file="${google.log}"/>
            <then>
                <move file="${google.log}" todir="${reports.web}/${browser}"/>
            </then>
        </if>
    </target>

    <!-- test with a given brower. If chrome is used, the chrome driver has to be installed -->
    <target name="web-browser-pabot" depends="check-config-file">
        <var name="browser" value="firefox"/>
        <if><isset property="BROWSER"/>
            <then>
                <var name="browser" value="${BROWSER}"/>
            </then>
        </if>
        <var name="output" value="${reports.web}/${browser}"/>
        <mkdir dir="${output}"/>
        <var name="target" value="web/"/>
        <if><isset property="TEST"/>
            <then>
                <var name="target" value="web/${TEST}"/>
            </then>
        </if>
        <run_pabot failonerror="${test.with.fail}" output="${output}">
            <arg value="--processes"/>
            <arg value="${pabot.processes}"/>
            <arg value="--outputdir"/>
            <arg value="${output}"/>
            <arg value="-v"/>
            <arg value="browser:${browser}"/>
            <arg value="-v"/>
            <arg value="DELAY:0.2"/>
            <arg value="--loglevel"/>
            <arg value="debug"/>
            <arg value="${basedir}/testcases/${target}"/>
        </run_pabot>
        <if>
            <available file="${google.log}"/>
            <then>
                <move file="${google.log}" todir="${reports.web}/${browser}"/>
            </then>
        </if>
    </target>

    <target name="tests-dist">
        <librarybuild target="dist"/>
    </target>

    <target name="package" depends="lifecycle.package">
        <librarybuild target="jar"/>
    </target>

    <!-- delete the reports directory -->
    <target name="tests-clean" depends="clean">
    <delete dir="${basedir}/target"/>
    <librarybuild target="clean"/>
    </target>

    <!-- compile the unit tests under library/java/test -->
    <target name="test-compile" description=""/>

    <!-- no-operation -->
    <target name="integration" description=""/>

    <target name="test">
        <librarybuild target="test"/>
    </target>
</project>
